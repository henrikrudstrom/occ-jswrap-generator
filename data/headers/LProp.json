{
  "headers": [
    "LProp_SequenceOfCIType.hxx", 
    "LProp_Status.hxx", 
    "LProp_AnalyticCurInf.hxx", 
    "LProp_BadContinuity.hxx", 
    "LProp_CIType.hxx", 
    "LProp_NotDefined.hxx", 
    "LProp_CurAndInf.hxx"
  ], 
  "declarations": [
    {
      "declType": "class", 
      "name": "LProp_CurAndInf", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "LProp_CurAndInf", 
          "parent": "LProp_CurAndInf", 
          "arguments": [], 
          "key": "LProp_CurAndInf::LProp_CurAndInf()", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "LProp_CurAndInf", 
          "parent": "LProp_CurAndInf", 
          "arguments": [
            {
              "decl": "const LProp_CurAndInf &", 
              "type": "LProp_CurAndInf", 
              "name": "arg0"
            }
          ], 
          "key": "LProp_CurAndInf::LProp_CurAndInf(LProp_CurAndInf)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "AddInflection", 
          "parent": "LProp_CurAndInf", 
          "arguments": [
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Param"
            }
          ], 
          "key": "LProp_CurAndInf::AddInflection(Standard_Real)", 
          "returnType": "void", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "AddExtCur", 
          "parent": "LProp_CurAndInf", 
          "arguments": [
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Param"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "IsMin"
            }
          ], 
          "key": "LProp_CurAndInf::AddExtCur(Standard_Real, Standard_Boolean)", 
          "returnType": "void", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "Clear", 
          "parent": "LProp_CurAndInf", 
          "arguments": [], 
          "key": "LProp_CurAndInf::Clear()", 
          "returnType": "void", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "IsEmpty", 
          "parent": "LProp_CurAndInf", 
          "arguments": [], 
          "key": "LProp_CurAndInf::IsEmpty()", 
          "returnType": "Standard_Boolean", 
          "const": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "NbPoints", 
          "parent": "LProp_CurAndInf", 
          "arguments": [], 
          "key": "LProp_CurAndInf::NbPoints()", 
          "returnType": "Standard_Integer", 
          "const": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "Parameter", 
          "parent": "LProp_CurAndInf", 
          "arguments": [
            {
              "decl": "const Standard_Integer", 
              "type": "Standard_Integer", 
              "name": "N"
            }
          ], 
          "key": "LProp_CurAndInf::Parameter(Standard_Integer)", 
          "returnType": "Standard_Real", 
          "const": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "Type", 
          "parent": "LProp_CurAndInf", 
          "arguments": [
            {
              "decl": "const Standard_Integer", 
              "type": "Standard_Integer", 
              "name": "N"
            }
          ], 
          "key": "LProp_CurAndInf::Type(Standard_Integer)", 
          "returnType": "LProp_CIType", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/LProp_CurAndInf.hxx", 
        35
      ], 
      "key": "LProp_CurAndInf"
    }, 
    {
      "declType": "class", 
      "name": "LProp_AnalyticCurInf", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "LProp_AnalyticCurInf", 
          "parent": "LProp_AnalyticCurInf", 
          "arguments": [], 
          "key": "LProp_AnalyticCurInf::LProp_AnalyticCurInf()", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "LProp_AnalyticCurInf", 
          "parent": "LProp_AnalyticCurInf", 
          "arguments": [
            {
              "decl": "const LProp_AnalyticCurInf &", 
              "type": "LProp_AnalyticCurInf", 
              "name": "arg0"
            }
          ], 
          "key": "LProp_AnalyticCurInf::LProp_AnalyticCurInf(LProp_AnalyticCurInf)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Perform", 
          "parent": "LProp_AnalyticCurInf", 
          "arguments": [
            {
              "decl": "const GeomAbs_CurveType", 
              "type": "GeomAbs_CurveType", 
              "name": "T"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "UFirst"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "ULast"
            }, 
            {
              "decl": "LProp_CurAndInf &", 
              "type": "LProp_CurAndInf", 
              "name": "Result"
            }
          ], 
          "key": "LProp_AnalyticCurInf::Perform(GeomAbs_CurveType, Standard_Real, Standard_Real, LProp_CurAndInf)", 
          "returnType": "void", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/LProp_AnalyticCurInf.hxx", 
        31
      ], 
      "key": "LProp_AnalyticCurInf"
    }, 
    {
      "declType": "class", 
      "name": "LProp_BadContinuity", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "LProp_BadContinuity", 
          "parent": "LProp_BadContinuity", 
          "arguments": [], 
          "key": "LProp_BadContinuity::LProp_BadContinuity()", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "LProp_BadContinuity", 
          "parent": "LProp_BadContinuity", 
          "arguments": [
            {
              "decl": "const Standard_CString", 
              "type": "Standard_CString", 
              "name": "theMessage"
            }
          ], 
          "key": "LProp_BadContinuity::LProp_BadContinuity(Standard_CString)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "LProp_BadContinuity", 
          "parent": "LProp_BadContinuity", 
          "arguments": [
            {
              "decl": "const LProp_BadContinuity &", 
              "type": "LProp_BadContinuity", 
              "name": "arg0"
            }
          ], 
          "key": "LProp_BadContinuity::LProp_BadContinuity(LProp_BadContinuity)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Raise", 
          "parent": "LProp_BadContinuity", 
          "arguments": [
            {
              "decl": "const Standard_CString", 
              "type": "Standard_CString", 
              "name": "theMessage", 
              "default": "\"\""
            }
          ], 
          "key": "LProp_BadContinuity::Raise(Standard_CString)", 
          "returnType": "void", 
          "static": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "Raise", 
          "parent": "LProp_BadContinuity", 
          "arguments": [
            {
              "decl": "Standard_SStream &", 
              "type": "Standard_SStream", 
              "name": "theMessage"
            }
          ], 
          "key": "LProp_BadContinuity::Raise(Standard_SStream)", 
          "returnType": "void", 
          "static": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "NewInstance", 
          "parent": "LProp_BadContinuity", 
          "arguments": [
            {
              "decl": "const Standard_CString", 
              "type": "Standard_CString", 
              "name": "theMessage", 
              "default": "\"\""
            }
          ], 
          "key": "LProp_BadContinuity::NewInstance(Standard_CString)", 
          "returnType": "opencascade::handle<LProp_BadContinuity>", 
          "static": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "get_type_name", 
          "parent": "LProp_BadContinuity", 
          "arguments": [], 
          "key": "LProp_BadContinuity::get_type_name()", 
          "returnType": "char const *", 
          "static": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "get_type_descriptor", 
          "parent": "LProp_BadContinuity", 
          "arguments": [], 
          "key": "LProp_BadContinuity::get_type_descriptor()", 
          "returnType": "opencascade::handle<Standard_Type> const &", 
          "static": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "DynamicType", 
          "parent": "LProp_BadContinuity", 
          "arguments": [], 
          "key": "LProp_BadContinuity::DynamicType()", 
          "returnType": "opencascade::handle<Standard_Type> const &", 
          "const": "1", 
          "throws": true, 
          "virtuality": "virtual"
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "Standard_Failure"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/LProp_BadContinuity.hxx", 
        35
      ], 
      "key": "LProp_BadContinuity"
    }, 
    {
      "declType": "class", 
      "name": "LProp_NotDefined", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "LProp_NotDefined", 
          "parent": "LProp_NotDefined", 
          "arguments": [], 
          "key": "LProp_NotDefined::LProp_NotDefined()", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "LProp_NotDefined", 
          "parent": "LProp_NotDefined", 
          "arguments": [
            {
              "decl": "const Standard_CString", 
              "type": "Standard_CString", 
              "name": "theMessage"
            }
          ], 
          "key": "LProp_NotDefined::LProp_NotDefined(Standard_CString)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "LProp_NotDefined", 
          "parent": "LProp_NotDefined", 
          "arguments": [
            {
              "decl": "const LProp_NotDefined &", 
              "type": "LProp_NotDefined", 
              "name": "arg0"
            }
          ], 
          "key": "LProp_NotDefined::LProp_NotDefined(LProp_NotDefined)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Raise", 
          "parent": "LProp_NotDefined", 
          "arguments": [
            {
              "decl": "const Standard_CString", 
              "type": "Standard_CString", 
              "name": "theMessage", 
              "default": "\"\""
            }
          ], 
          "key": "LProp_NotDefined::Raise(Standard_CString)", 
          "returnType": "void", 
          "static": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "Raise", 
          "parent": "LProp_NotDefined", 
          "arguments": [
            {
              "decl": "Standard_SStream &", 
              "type": "Standard_SStream", 
              "name": "theMessage"
            }
          ], 
          "key": "LProp_NotDefined::Raise(Standard_SStream)", 
          "returnType": "void", 
          "static": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "NewInstance", 
          "parent": "LProp_NotDefined", 
          "arguments": [
            {
              "decl": "const Standard_CString", 
              "type": "Standard_CString", 
              "name": "theMessage", 
              "default": "\"\""
            }
          ], 
          "key": "LProp_NotDefined::NewInstance(Standard_CString)", 
          "returnType": "opencascade::handle<LProp_NotDefined>", 
          "static": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "get_type_name", 
          "parent": "LProp_NotDefined", 
          "arguments": [], 
          "key": "LProp_NotDefined::get_type_name()", 
          "returnType": "char const *", 
          "static": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "get_type_descriptor", 
          "parent": "LProp_NotDefined", 
          "arguments": [], 
          "key": "LProp_NotDefined::get_type_descriptor()", 
          "returnType": "opencascade::handle<Standard_Type> const &", 
          "static": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "DynamicType", 
          "parent": "LProp_NotDefined", 
          "arguments": [], 
          "key": "LProp_NotDefined::DynamicType()", 
          "returnType": "opencascade::handle<Standard_Type> const &", 
          "const": "1", 
          "throws": true, 
          "virtuality": "virtual"
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "Standard_Failure"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/LProp_NotDefined.hxx", 
        35
      ], 
      "key": "LProp_NotDefined"
    }, 
    {
      "type": "NCollection_Sequence<LProp_CIType>", 
      "declType": "typedef", 
      "name": "LProp_SequenceOfCIType", 
      "key": "LProp_SequenceOfCIType"
    }, 
    {
      "type": "opencascade::handle<LProp_BadContinuity>", 
      "declType": "typedef", 
      "name": "Handle_LProp_BadContinuity", 
      "key": "Handle_LProp_BadContinuity"
    }, 
    {
      "type": "opencascade::handle<LProp_NotDefined>", 
      "declType": "typedef", 
      "name": "Handle_LProp_NotDefined", 
      "key": "Handle_LProp_NotDefined"
    }, 
    {
      "declType": "enum", 
      "values": [
        [
          "LProp_Inflection", 
          0
        ], 
        [
          "LProp_MinCur", 
          1
        ], 
        [
          "LProp_MaxCur", 
          2
        ]
      ], 
      "name": "LProp_CIType", 
      "key": "LProp_CIType"
    }, 
    {
      "declType": "enum", 
      "values": [
        [
          "LProp_Undecided", 
          0
        ], 
        [
          "LProp_Undefined", 
          1
        ], 
        [
          "LProp_Defined", 
          2
        ], 
        [
          "LProp_Computed", 
          3
        ]
      ], 
      "name": "LProp_Status", 
      "key": "LProp_Status"
    }
  ], 
  "name": "LProp"
}