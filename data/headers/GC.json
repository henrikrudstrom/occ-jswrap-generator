{
  "headers": [
    "GC_MakeMirror.hxx", 
    "GC_MakeArcOfCircle.hxx", 
    "GC_MakeArcOfHyperbola.hxx", 
    "GC_MakeTrimmedCylinder.hxx", 
    "GC_MakeEllipse.hxx", 
    "GC_MakeHyperbola.hxx", 
    "GC_MakeArcOfParabola.hxx", 
    "GC_MakeLine.hxx", 
    "GC_MakeScale.hxx", 
    "GC_MakeCylindricalSurface.hxx", 
    "GC_MakePlane.hxx", 
    "GC_MakeTranslation.hxx", 
    "GC_MakeCircle.hxx", 
    "GC_Root.hxx", 
    "GC_MakeTrimmedCone.hxx", 
    "GC_MakeSegment.hxx", 
    "GC_MakeConicalSurface.hxx", 
    "GC_MakeRotation.hxx", 
    "GC_MakeArcOfEllipse.hxx"
  ], 
  "declarations": [
    {
      "declType": "class", 
      "name": "GC_MakeMirror", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeMirror", 
          "parent": "GC_MakeMirror", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point"
            }
          ], 
          "key": "GC_MakeMirror::GC_MakeMirror(gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeMirror", 
          "parent": "GC_MakeMirror", 
          "arguments": [
            {
              "decl": "const gp_Ax1 &", 
              "type": "gp_Ax1", 
              "name": "Axis"
            }
          ], 
          "key": "GC_MakeMirror::GC_MakeMirror(gp_Ax1)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeMirror", 
          "parent": "GC_MakeMirror", 
          "arguments": [
            {
              "decl": "const gp_Lin &", 
              "type": "gp_Lin", 
              "name": "Line"
            }
          ], 
          "key": "GC_MakeMirror::GC_MakeMirror(gp_Lin)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeMirror", 
          "parent": "GC_MakeMirror", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point"
            }, 
            {
              "decl": "const gp_Dir &", 
              "type": "gp_Dir", 
              "name": "Direc"
            }
          ], 
          "key": "GC_MakeMirror::GC_MakeMirror(gp_Pnt, gp_Dir)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeMirror", 
          "parent": "GC_MakeMirror", 
          "arguments": [
            {
              "decl": "const gp_Pln &", 
              "type": "gp_Pln", 
              "name": "Plane"
            }
          ], 
          "key": "GC_MakeMirror::GC_MakeMirror(gp_Pln)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeMirror", 
          "parent": "GC_MakeMirror", 
          "arguments": [
            {
              "decl": "const gp_Ax2 &", 
              "type": "gp_Ax2", 
              "name": "Plane"
            }
          ], 
          "key": "GC_MakeMirror::GC_MakeMirror(gp_Ax2)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeMirror", 
          "parent": "GC_MakeMirror", 
          "arguments": [
            {
              "decl": "const GC_MakeMirror &", 
              "type": "GC_MakeMirror", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeMirror::GC_MakeMirror(GC_MakeMirror)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeMirror", 
          "arguments": [], 
          "key": "GC_MakeMirror::Value()", 
          "returnType": "opencascade::handle<Geom_Transformation> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeMirror.hxx", 
        40
      ], 
      "key": "GC_MakeMirror"
    }, 
    {
      "declType": "class", 
      "name": "GC_Root", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_Root", 
          "parent": "GC_Root", 
          "arguments": [
            {
              "decl": "const GC_Root &", 
              "type": "GC_Root", 
              "name": "arg0"
            }
          ], 
          "key": "GC_Root::GC_Root(GC_Root)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_Root", 
          "parent": "GC_Root", 
          "arguments": [], 
          "key": "GC_Root::GC_Root()", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "IsDone", 
          "parent": "GC_Root", 
          "arguments": [], 
          "key": "GC_Root::IsDone()", 
          "returnType": "Standard_Boolean", 
          "const": "1", 
          "throws": true
        }, 
        {
          "declType": "method", 
          "name": "Status", 
          "parent": "GC_Root", 
          "arguments": [], 
          "key": "GC_Root::Status()", 
          "returnType": "gce_ErrorType", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/GC_Root.hxx", 
        30
      ], 
      "key": "GC_Root"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeArcOfCircle", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfCircle", 
          "parent": "GC_MakeArcOfCircle", 
          "arguments": [
            {
              "decl": "const gp_Circ &", 
              "type": "gp_Circ", 
              "name": "Circ"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha1"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha2"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfCircle::GC_MakeArcOfCircle(gp_Circ, Standard_Real, Standard_Real, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfCircle", 
          "parent": "GC_MakeArcOfCircle", 
          "arguments": [
            {
              "decl": "const gp_Circ &", 
              "type": "gp_Circ", 
              "name": "Circ"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfCircle::GC_MakeArcOfCircle(gp_Circ, gp_Pnt, Standard_Real, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfCircle", 
          "parent": "GC_MakeArcOfCircle", 
          "arguments": [
            {
              "decl": "const gp_Circ &", 
              "type": "gp_Circ", 
              "name": "Circ"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfCircle::GC_MakeArcOfCircle(gp_Circ, gp_Pnt, gp_Pnt, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfCircle", 
          "parent": "GC_MakeArcOfCircle", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P3"
            }
          ], 
          "key": "GC_MakeArcOfCircle::GC_MakeArcOfCircle(gp_Pnt, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfCircle", 
          "parent": "GC_MakeArcOfCircle", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Vec &", 
              "type": "gp_Vec", 
              "name": "V"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }
          ], 
          "key": "GC_MakeArcOfCircle::GC_MakeArcOfCircle(gp_Pnt, gp_Vec, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfCircle", 
          "parent": "GC_MakeArcOfCircle", 
          "arguments": [
            {
              "decl": "const GC_MakeArcOfCircle &", 
              "type": "GC_MakeArcOfCircle", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeArcOfCircle::GC_MakeArcOfCircle(GC_MakeArcOfCircle)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeArcOfCircle", 
          "arguments": [], 
          "key": "GC_MakeArcOfCircle::Value()", 
          "returnType": "opencascade::handle<Geom_TrimmedCurve> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeArcOfCircle.hxx", 
        39
      ], 
      "key": "GC_MakeArcOfCircle"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeArcOfHyperbola", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfHyperbola", 
          "parent": "GC_MakeArcOfHyperbola", 
          "arguments": [
            {
              "decl": "const gp_Hypr &", 
              "type": "gp_Hypr", 
              "name": "Hypr"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha1"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha2"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfHyperbola::GC_MakeArcOfHyperbola(gp_Hypr, Standard_Real, Standard_Real, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfHyperbola", 
          "parent": "GC_MakeArcOfHyperbola", 
          "arguments": [
            {
              "decl": "const gp_Hypr &", 
              "type": "gp_Hypr", 
              "name": "Hypr"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfHyperbola::GC_MakeArcOfHyperbola(gp_Hypr, gp_Pnt, Standard_Real, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfHyperbola", 
          "parent": "GC_MakeArcOfHyperbola", 
          "arguments": [
            {
              "decl": "const gp_Hypr &", 
              "type": "gp_Hypr", 
              "name": "Hypr"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfHyperbola::GC_MakeArcOfHyperbola(gp_Hypr, gp_Pnt, gp_Pnt, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfHyperbola", 
          "parent": "GC_MakeArcOfHyperbola", 
          "arguments": [
            {
              "decl": "const GC_MakeArcOfHyperbola &", 
              "type": "GC_MakeArcOfHyperbola", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeArcOfHyperbola::GC_MakeArcOfHyperbola(GC_MakeArcOfHyperbola)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeArcOfHyperbola", 
          "arguments": [], 
          "key": "GC_MakeArcOfHyperbola::Value()", 
          "returnType": "opencascade::handle<Geom_TrimmedCurve> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeArcOfHyperbola.hxx", 
        39
      ], 
      "key": "GC_MakeArcOfHyperbola"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeTrimmedCylinder", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeTrimmedCylinder", 
          "parent": "GC_MakeTrimmedCylinder", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P3"
            }
          ], 
          "key": "GC_MakeTrimmedCylinder::GC_MakeTrimmedCylinder(gp_Pnt, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeTrimmedCylinder", 
          "parent": "GC_MakeTrimmedCylinder", 
          "arguments": [
            {
              "decl": "const gp_Circ &", 
              "type": "gp_Circ", 
              "name": "Circ"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Height"
            }
          ], 
          "key": "GC_MakeTrimmedCylinder::GC_MakeTrimmedCylinder(gp_Circ, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeTrimmedCylinder", 
          "parent": "GC_MakeTrimmedCylinder", 
          "arguments": [
            {
              "decl": "const gp_Ax1 &", 
              "type": "gp_Ax1", 
              "name": "A1"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Radius"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Height"
            }
          ], 
          "key": "GC_MakeTrimmedCylinder::GC_MakeTrimmedCylinder(gp_Ax1, Standard_Real, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeTrimmedCylinder", 
          "parent": "GC_MakeTrimmedCylinder", 
          "arguments": [
            {
              "decl": "const gp_Cylinder &", 
              "type": "gp_Cylinder", 
              "name": "Cyl"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Height"
            }
          ], 
          "key": "GC_MakeTrimmedCylinder::GC_MakeTrimmedCylinder(gp_Cylinder, gp_Pnt, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeTrimmedCylinder", 
          "parent": "GC_MakeTrimmedCylinder", 
          "arguments": [
            {
              "decl": "const gp_Cylinder &", 
              "type": "gp_Cylinder", 
              "name": "Cyl"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }
          ], 
          "key": "GC_MakeTrimmedCylinder::GC_MakeTrimmedCylinder(gp_Cylinder, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeTrimmedCylinder", 
          "parent": "GC_MakeTrimmedCylinder", 
          "arguments": [
            {
              "decl": "const GC_MakeTrimmedCylinder &", 
              "type": "GC_MakeTrimmedCylinder", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeTrimmedCylinder::GC_MakeTrimmedCylinder(GC_MakeTrimmedCylinder)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeTrimmedCylinder", 
          "arguments": [], 
          "key": "GC_MakeTrimmedCylinder::Value()", 
          "returnType": "opencascade::handle<Geom_RectangularTrimmedSurface> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeTrimmedCylinder.hxx", 
        42
      ], 
      "key": "GC_MakeTrimmedCylinder"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeEllipse", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeEllipse", 
          "parent": "GC_MakeEllipse", 
          "arguments": [
            {
              "decl": "const gp_Elips &", 
              "type": "gp_Elips", 
              "name": "E"
            }
          ], 
          "key": "GC_MakeEllipse::GC_MakeEllipse(gp_Elips)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeEllipse", 
          "parent": "GC_MakeEllipse", 
          "arguments": [
            {
              "decl": "const gp_Ax2 &", 
              "type": "gp_Ax2", 
              "name": "A2"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "MajorRadius"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "MinorRadius"
            }
          ], 
          "key": "GC_MakeEllipse::GC_MakeEllipse(gp_Ax2, Standard_Real, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeEllipse", 
          "parent": "GC_MakeEllipse", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "S1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "S2"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Center"
            }
          ], 
          "key": "GC_MakeEllipse::GC_MakeEllipse(gp_Pnt, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeEllipse", 
          "parent": "GC_MakeEllipse", 
          "arguments": [
            {
              "decl": "const GC_MakeEllipse &", 
              "type": "GC_MakeEllipse", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeEllipse::GC_MakeEllipse(GC_MakeEllipse)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeEllipse", 
          "arguments": [], 
          "key": "GC_MakeEllipse::Value()", 
          "returnType": "opencascade::handle<Geom_Ellipse> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeEllipse.hxx", 
        40
      ], 
      "key": "GC_MakeEllipse"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeHyperbola", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeHyperbola", 
          "parent": "GC_MakeHyperbola", 
          "arguments": [
            {
              "decl": "const gp_Hypr &", 
              "type": "gp_Hypr", 
              "name": "H"
            }
          ], 
          "key": "GC_MakeHyperbola::GC_MakeHyperbola(gp_Hypr)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeHyperbola", 
          "parent": "GC_MakeHyperbola", 
          "arguments": [
            {
              "decl": "const gp_Ax2 &", 
              "type": "gp_Ax2", 
              "name": "A2"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "MajorRadius"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "MinorRadius"
            }
          ], 
          "key": "GC_MakeHyperbola::GC_MakeHyperbola(gp_Ax2, Standard_Real, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeHyperbola", 
          "parent": "GC_MakeHyperbola", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "S1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "S2"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Center"
            }
          ], 
          "key": "GC_MakeHyperbola::GC_MakeHyperbola(gp_Pnt, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeHyperbola", 
          "parent": "GC_MakeHyperbola", 
          "arguments": [
            {
              "decl": "const GC_MakeHyperbola &", 
              "type": "GC_MakeHyperbola", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeHyperbola::GC_MakeHyperbola(GC_MakeHyperbola)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeHyperbola", 
          "arguments": [], 
          "key": "GC_MakeHyperbola::Value()", 
          "returnType": "opencascade::handle<Geom_Hyperbola> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeHyperbola.hxx", 
        63
      ], 
      "key": "GC_MakeHyperbola"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeArcOfParabola", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfParabola", 
          "parent": "GC_MakeArcOfParabola", 
          "arguments": [
            {
              "decl": "const gp_Parab &", 
              "type": "gp_Parab", 
              "name": "Parab"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha1"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha2"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfParabola::GC_MakeArcOfParabola(gp_Parab, Standard_Real, Standard_Real, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfParabola", 
          "parent": "GC_MakeArcOfParabola", 
          "arguments": [
            {
              "decl": "const gp_Parab &", 
              "type": "gp_Parab", 
              "name": "Parab"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfParabola::GC_MakeArcOfParabola(gp_Parab, gp_Pnt, Standard_Real, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfParabola", 
          "parent": "GC_MakeArcOfParabola", 
          "arguments": [
            {
              "decl": "const gp_Parab &", 
              "type": "gp_Parab", 
              "name": "Parab"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfParabola::GC_MakeArcOfParabola(gp_Parab, gp_Pnt, gp_Pnt, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfParabola", 
          "parent": "GC_MakeArcOfParabola", 
          "arguments": [
            {
              "decl": "const GC_MakeArcOfParabola &", 
              "type": "GC_MakeArcOfParabola", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeArcOfParabola::GC_MakeArcOfParabola(GC_MakeArcOfParabola)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeArcOfParabola", 
          "arguments": [], 
          "key": "GC_MakeArcOfParabola::Value()", 
          "returnType": "opencascade::handle<Geom_TrimmedCurve> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeArcOfParabola.hxx", 
        39
      ], 
      "key": "GC_MakeArcOfParabola"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeLine", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeLine", 
          "parent": "GC_MakeLine", 
          "arguments": [
            {
              "decl": "const gp_Ax1 &", 
              "type": "gp_Ax1", 
              "name": "A1"
            }
          ], 
          "key": "GC_MakeLine::GC_MakeLine(gp_Ax1)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeLine", 
          "parent": "GC_MakeLine", 
          "arguments": [
            {
              "decl": "const gp_Lin &", 
              "type": "gp_Lin", 
              "name": "L"
            }
          ], 
          "key": "GC_MakeLine::GC_MakeLine(gp_Lin)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeLine", 
          "parent": "GC_MakeLine", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P"
            }, 
            {
              "decl": "const gp_Dir &", 
              "type": "gp_Dir", 
              "name": "V"
            }
          ], 
          "key": "GC_MakeLine::GC_MakeLine(gp_Pnt, gp_Dir)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeLine", 
          "parent": "GC_MakeLine", 
          "arguments": [
            {
              "decl": "const gp_Lin &", 
              "type": "gp_Lin", 
              "name": "Lin"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point"
            }
          ], 
          "key": "GC_MakeLine::GC_MakeLine(gp_Lin, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeLine", 
          "parent": "GC_MakeLine", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }
          ], 
          "key": "GC_MakeLine::GC_MakeLine(gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeLine", 
          "parent": "GC_MakeLine", 
          "arguments": [
            {
              "decl": "const GC_MakeLine &", 
              "type": "GC_MakeLine", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeLine::GC_MakeLine(GC_MakeLine)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeLine", 
          "arguments": [], 
          "key": "GC_MakeLine::Value()", 
          "returnType": "opencascade::handle<Geom_Line> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeLine.hxx", 
        44
      ], 
      "key": "GC_MakeLine"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeScale", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeScale", 
          "parent": "GC_MakeScale", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Scale"
            }
          ], 
          "key": "GC_MakeScale::GC_MakeScale(gp_Pnt, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeScale", 
          "parent": "GC_MakeScale", 
          "arguments": [
            {
              "decl": "const GC_MakeScale &", 
              "type": "GC_MakeScale", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeScale::GC_MakeScale(GC_MakeScale)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeScale", 
          "arguments": [], 
          "key": "GC_MakeScale::Value()", 
          "returnType": "opencascade::handle<Geom_Transformation> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeScale.hxx", 
        37
      ], 
      "key": "GC_MakeScale"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeCylindricalSurface", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeCylindricalSurface", 
          "parent": "GC_MakeCylindricalSurface", 
          "arguments": [
            {
              "decl": "const gp_Ax2 &", 
              "type": "gp_Ax2", 
              "name": "A2"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Radius"
            }
          ], 
          "key": "GC_MakeCylindricalSurface::GC_MakeCylindricalSurface(gp_Ax2, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCylindricalSurface", 
          "parent": "GC_MakeCylindricalSurface", 
          "arguments": [
            {
              "decl": "const gp_Cylinder &", 
              "type": "gp_Cylinder", 
              "name": "C"
            }
          ], 
          "key": "GC_MakeCylindricalSurface::GC_MakeCylindricalSurface(gp_Cylinder)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCylindricalSurface", 
          "parent": "GC_MakeCylindricalSurface", 
          "arguments": [
            {
              "decl": "const gp_Cylinder &", 
              "type": "gp_Cylinder", 
              "name": "Cyl"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point"
            }
          ], 
          "key": "GC_MakeCylindricalSurface::GC_MakeCylindricalSurface(gp_Cylinder, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCylindricalSurface", 
          "parent": "GC_MakeCylindricalSurface", 
          "arguments": [
            {
              "decl": "const gp_Cylinder &", 
              "type": "gp_Cylinder", 
              "name": "Cyl"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Dist"
            }
          ], 
          "key": "GC_MakeCylindricalSurface::GC_MakeCylindricalSurface(gp_Cylinder, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCylindricalSurface", 
          "parent": "GC_MakeCylindricalSurface", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P3"
            }
          ], 
          "key": "GC_MakeCylindricalSurface::GC_MakeCylindricalSurface(gp_Pnt, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCylindricalSurface", 
          "parent": "GC_MakeCylindricalSurface", 
          "arguments": [
            {
              "decl": "const gp_Ax1 &", 
              "type": "gp_Ax1", 
              "name": "Axis"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Radius"
            }
          ], 
          "key": "GC_MakeCylindricalSurface::GC_MakeCylindricalSurface(gp_Ax1, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCylindricalSurface", 
          "parent": "GC_MakeCylindricalSurface", 
          "arguments": [
            {
              "decl": "const gp_Circ &", 
              "type": "gp_Circ", 
              "name": "Circ"
            }
          ], 
          "key": "GC_MakeCylindricalSurface::GC_MakeCylindricalSurface(gp_Circ)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCylindricalSurface", 
          "parent": "GC_MakeCylindricalSurface", 
          "arguments": [
            {
              "decl": "const GC_MakeCylindricalSurface &", 
              "type": "GC_MakeCylindricalSurface", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeCylindricalSurface::GC_MakeCylindricalSurface(GC_MakeCylindricalSurface)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeCylindricalSurface", 
          "arguments": [], 
          "key": "GC_MakeCylindricalSurface::Value()", 
          "returnType": "opencascade::handle<Geom_CylindricalSurface> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeCylindricalSurface.hxx", 
        59
      ], 
      "key": "GC_MakeCylindricalSurface"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakePlane", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakePlane", 
          "parent": "GC_MakePlane", 
          "arguments": [
            {
              "decl": "const gp_Ax2 &", 
              "type": "gp_Ax2", 
              "name": "A2"
            }
          ], 
          "key": "GC_MakePlane::GC_MakePlane(gp_Ax2)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakePlane", 
          "parent": "GC_MakePlane", 
          "arguments": [
            {
              "decl": "const gp_Pln &", 
              "type": "gp_Pln", 
              "name": "Pl"
            }
          ], 
          "key": "GC_MakePlane::GC_MakePlane(gp_Pln)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakePlane", 
          "parent": "GC_MakePlane", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P"
            }, 
            {
              "decl": "const gp_Dir &", 
              "type": "gp_Dir", 
              "name": "V"
            }
          ], 
          "key": "GC_MakePlane::GC_MakePlane(gp_Pnt, gp_Dir)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakePlane", 
          "parent": "GC_MakePlane", 
          "arguments": [
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "A"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "B"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "C"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "D"
            }
          ], 
          "key": "GC_MakePlane::GC_MakePlane(Standard_Real, Standard_Real, Standard_Real, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakePlane", 
          "parent": "GC_MakePlane", 
          "arguments": [
            {
              "decl": "const gp_Pln &", 
              "type": "gp_Pln", 
              "name": "Pln"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point"
            }
          ], 
          "key": "GC_MakePlane::GC_MakePlane(gp_Pln, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakePlane", 
          "parent": "GC_MakePlane", 
          "arguments": [
            {
              "decl": "const gp_Pln &", 
              "type": "gp_Pln", 
              "name": "Pln"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Dist"
            }
          ], 
          "key": "GC_MakePlane::GC_MakePlane(gp_Pln, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakePlane", 
          "parent": "GC_MakePlane", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P3"
            }
          ], 
          "key": "GC_MakePlane::GC_MakePlane(gp_Pnt, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakePlane", 
          "parent": "GC_MakePlane", 
          "arguments": [
            {
              "decl": "const gp_Ax1 &", 
              "type": "gp_Ax1", 
              "name": "Axis"
            }
          ], 
          "key": "GC_MakePlane::GC_MakePlane(gp_Ax1)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakePlane", 
          "parent": "GC_MakePlane", 
          "arguments": [
            {
              "decl": "const GC_MakePlane &", 
              "type": "GC_MakePlane", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakePlane::GC_MakePlane(GC_MakePlane)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakePlane", 
          "arguments": [], 
          "key": "GC_MakePlane::Value()", 
          "returnType": "opencascade::handle<Geom_Plane> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakePlane.hxx", 
        46
      ], 
      "key": "GC_MakePlane"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeTranslation", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeTranslation", 
          "parent": "GC_MakeTranslation", 
          "arguments": [
            {
              "decl": "const gp_Vec &", 
              "type": "gp_Vec", 
              "name": "Vect"
            }
          ], 
          "key": "GC_MakeTranslation::GC_MakeTranslation(gp_Vec)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeTranslation", 
          "parent": "GC_MakeTranslation", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point2"
            }
          ], 
          "key": "GC_MakeTranslation::GC_MakeTranslation(gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeTranslation", 
          "parent": "GC_MakeTranslation", 
          "arguments": [
            {
              "decl": "const GC_MakeTranslation &", 
              "type": "GC_MakeTranslation", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeTranslation::GC_MakeTranslation(GC_MakeTranslation)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeTranslation", 
          "arguments": [], 
          "key": "GC_MakeTranslation::Value()", 
          "returnType": "opencascade::handle<Geom_Transformation> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeTranslation.hxx", 
        36
      ], 
      "key": "GC_MakeTranslation"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeCircle", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeCircle", 
          "parent": "GC_MakeCircle", 
          "arguments": [
            {
              "decl": "const gp_Circ &", 
              "type": "gp_Circ", 
              "name": "C"
            }
          ], 
          "key": "GC_MakeCircle::GC_MakeCircle(gp_Circ)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCircle", 
          "parent": "GC_MakeCircle", 
          "arguments": [
            {
              "decl": "const gp_Ax2 &", 
              "type": "gp_Ax2", 
              "name": "A2"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Radius"
            }
          ], 
          "key": "GC_MakeCircle::GC_MakeCircle(gp_Ax2, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCircle", 
          "parent": "GC_MakeCircle", 
          "arguments": [
            {
              "decl": "const gp_Circ &", 
              "type": "gp_Circ", 
              "name": "Circ"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Dist"
            }
          ], 
          "key": "GC_MakeCircle::GC_MakeCircle(gp_Circ, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCircle", 
          "parent": "GC_MakeCircle", 
          "arguments": [
            {
              "decl": "const gp_Circ &", 
              "type": "gp_Circ", 
              "name": "Circ"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point"
            }
          ], 
          "key": "GC_MakeCircle::GC_MakeCircle(gp_Circ, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCircle", 
          "parent": "GC_MakeCircle", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P3"
            }
          ], 
          "key": "GC_MakeCircle::GC_MakeCircle(gp_Pnt, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCircle", 
          "parent": "GC_MakeCircle", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Center"
            }, 
            {
              "decl": "const gp_Dir &", 
              "type": "gp_Dir", 
              "name": "Norm"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Radius"
            }
          ], 
          "key": "GC_MakeCircle::GC_MakeCircle(gp_Pnt, gp_Dir, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCircle", 
          "parent": "GC_MakeCircle", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Center"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "PtAxis"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Radius"
            }
          ], 
          "key": "GC_MakeCircle::GC_MakeCircle(gp_Pnt, gp_Pnt, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCircle", 
          "parent": "GC_MakeCircle", 
          "arguments": [
            {
              "decl": "const gp_Ax1 &", 
              "type": "gp_Ax1", 
              "name": "Axis"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Radius"
            }
          ], 
          "key": "GC_MakeCircle::GC_MakeCircle(gp_Ax1, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeCircle", 
          "parent": "GC_MakeCircle", 
          "arguments": [
            {
              "decl": "const GC_MakeCircle &", 
              "type": "GC_MakeCircle", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeCircle::GC_MakeCircle(GC_MakeCircle)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeCircle", 
          "arguments": [], 
          "key": "GC_MakeCircle::Value()", 
          "returnType": "opencascade::handle<Geom_Circle> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeCircle.hxx", 
        52
      ], 
      "key": "GC_MakeCircle"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeTrimmedCone", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeTrimmedCone", 
          "parent": "GC_MakeTrimmedCone", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P3"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P4"
            }
          ], 
          "key": "GC_MakeTrimmedCone::GC_MakeTrimmedCone(gp_Pnt, gp_Pnt, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeTrimmedCone", 
          "parent": "GC_MakeTrimmedCone", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "R1"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "R2"
            }
          ], 
          "key": "GC_MakeTrimmedCone::GC_MakeTrimmedCone(gp_Pnt, gp_Pnt, Standard_Real, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeTrimmedCone", 
          "parent": "GC_MakeTrimmedCone", 
          "arguments": [
            {
              "decl": "const GC_MakeTrimmedCone &", 
              "type": "GC_MakeTrimmedCone", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeTrimmedCone::GC_MakeTrimmedCone(GC_MakeTrimmedCone)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeTrimmedCone", 
          "arguments": [], 
          "key": "GC_MakeTrimmedCone::Value()", 
          "returnType": "opencascade::handle<Geom_RectangularTrimmedSurface> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeTrimmedCone.hxx", 
        39
      ], 
      "key": "GC_MakeTrimmedCone"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeSegment", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeSegment", 
          "parent": "GC_MakeSegment", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }
          ], 
          "key": "GC_MakeSegment::GC_MakeSegment(gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeSegment", 
          "parent": "GC_MakeSegment", 
          "arguments": [
            {
              "decl": "const gp_Lin &", 
              "type": "gp_Lin", 
              "name": "Line"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "U1"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "U2"
            }
          ], 
          "key": "GC_MakeSegment::GC_MakeSegment(gp_Lin, Standard_Real, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeSegment", 
          "parent": "GC_MakeSegment", 
          "arguments": [
            {
              "decl": "const gp_Lin &", 
              "type": "gp_Lin", 
              "name": "Line"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Ulast"
            }
          ], 
          "key": "GC_MakeSegment::GC_MakeSegment(gp_Lin, gp_Pnt, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeSegment", 
          "parent": "GC_MakeSegment", 
          "arguments": [
            {
              "decl": "const gp_Lin &", 
              "type": "gp_Lin", 
              "name": "Line"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }
          ], 
          "key": "GC_MakeSegment::GC_MakeSegment(gp_Lin, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeSegment", 
          "parent": "GC_MakeSegment", 
          "arguments": [
            {
              "decl": "const GC_MakeSegment &", 
              "type": "GC_MakeSegment", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeSegment::GC_MakeSegment(GC_MakeSegment)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeSegment", 
          "arguments": [], 
          "key": "GC_MakeSegment::Value()", 
          "returnType": "opencascade::handle<Geom_TrimmedCurve> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeSegment.hxx", 
        41
      ], 
      "key": "GC_MakeSegment"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeConicalSurface", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeConicalSurface", 
          "parent": "GC_MakeConicalSurface", 
          "arguments": [
            {
              "decl": "const gp_Ax2 &", 
              "type": "gp_Ax2", 
              "name": "A2"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Ang"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Radius"
            }
          ], 
          "key": "GC_MakeConicalSurface::GC_MakeConicalSurface(gp_Ax2, Standard_Real, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeConicalSurface", 
          "parent": "GC_MakeConicalSurface", 
          "arguments": [
            {
              "decl": "const gp_Cone &", 
              "type": "gp_Cone", 
              "name": "C"
            }
          ], 
          "key": "GC_MakeConicalSurface::GC_MakeConicalSurface(gp_Cone)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeConicalSurface", 
          "parent": "GC_MakeConicalSurface", 
          "arguments": [
            {
              "decl": "const gp_Cone &", 
              "type": "gp_Cone", 
              "name": "Cone"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point"
            }
          ], 
          "key": "GC_MakeConicalSurface::GC_MakeConicalSurface(gp_Cone, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeConicalSurface", 
          "parent": "GC_MakeConicalSurface", 
          "arguments": [
            {
              "decl": "const gp_Cone &", 
              "type": "gp_Cone", 
              "name": "Cone"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Dist"
            }
          ], 
          "key": "GC_MakeConicalSurface::GC_MakeConicalSurface(gp_Cone, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeConicalSurface", 
          "parent": "GC_MakeConicalSurface", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P3"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P4"
            }
          ], 
          "key": "GC_MakeConicalSurface::GC_MakeConicalSurface(gp_Pnt, gp_Pnt, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeConicalSurface", 
          "parent": "GC_MakeConicalSurface", 
          "arguments": [
            {
              "decl": "const gp_Ax1 &", 
              "type": "gp_Ax1", 
              "name": "Axis"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }
          ], 
          "key": "GC_MakeConicalSurface::GC_MakeConicalSurface(gp_Ax1, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeConicalSurface", 
          "parent": "GC_MakeConicalSurface", 
          "arguments": [
            {
              "decl": "const gp_Lin &", 
              "type": "gp_Lin", 
              "name": "Axis"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }
          ], 
          "key": "GC_MakeConicalSurface::GC_MakeConicalSurface(gp_Lin, gp_Pnt, gp_Pnt)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeConicalSurface", 
          "parent": "GC_MakeConicalSurface", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "R1"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "R2"
            }
          ], 
          "key": "GC_MakeConicalSurface::GC_MakeConicalSurface(gp_Pnt, gp_Pnt, Standard_Real, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeConicalSurface", 
          "parent": "GC_MakeConicalSurface", 
          "arguments": [
            {
              "decl": "const GC_MakeConicalSurface &", 
              "type": "GC_MakeConicalSurface", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeConicalSurface::GC_MakeConicalSurface(GC_MakeConicalSurface)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeConicalSurface", 
          "arguments": [], 
          "key": "GC_MakeConicalSurface::Value()", 
          "returnType": "opencascade::handle<Geom_ConicalSurface> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeConicalSurface.hxx", 
        63
      ], 
      "key": "GC_MakeConicalSurface"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeRotation", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeRotation", 
          "parent": "GC_MakeRotation", 
          "arguments": [
            {
              "decl": "const gp_Lin &", 
              "type": "gp_Lin", 
              "name": "Line"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Angle"
            }
          ], 
          "key": "GC_MakeRotation::GC_MakeRotation(gp_Lin, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeRotation", 
          "parent": "GC_MakeRotation", 
          "arguments": [
            {
              "decl": "const gp_Ax1 &", 
              "type": "gp_Ax1", 
              "name": "Axis"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Angle"
            }
          ], 
          "key": "GC_MakeRotation::GC_MakeRotation(gp_Ax1, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeRotation", 
          "parent": "GC_MakeRotation", 
          "arguments": [
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "Point"
            }, 
            {
              "decl": "const gp_Dir &", 
              "type": "gp_Dir", 
              "name": "Direc"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Angle"
            }
          ], 
          "key": "GC_MakeRotation::GC_MakeRotation(gp_Pnt, gp_Dir, Standard_Real)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeRotation", 
          "parent": "GC_MakeRotation", 
          "arguments": [
            {
              "decl": "const GC_MakeRotation &", 
              "type": "GC_MakeRotation", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeRotation::GC_MakeRotation(GC_MakeRotation)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeRotation", 
          "arguments": [], 
          "key": "GC_MakeRotation::Value()", 
          "returnType": "opencascade::handle<Geom_Transformation> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeRotation.hxx", 
        39
      ], 
      "key": "GC_MakeRotation"
    }, 
    {
      "declType": "class", 
      "name": "GC_MakeArcOfEllipse", 
      "abstract": false, 
      "declarations": [
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfEllipse", 
          "parent": "GC_MakeArcOfEllipse", 
          "arguments": [
            {
              "decl": "const gp_Elips &", 
              "type": "gp_Elips", 
              "name": "Elips"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha1"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha2"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfEllipse::GC_MakeArcOfEllipse(gp_Elips, Standard_Real, Standard_Real, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfEllipse", 
          "parent": "GC_MakeArcOfEllipse", 
          "arguments": [
            {
              "decl": "const gp_Elips &", 
              "type": "gp_Elips", 
              "name": "Elips"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P"
            }, 
            {
              "decl": "const Standard_Real", 
              "type": "Standard_Real", 
              "name": "Alpha"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfEllipse::GC_MakeArcOfEllipse(gp_Elips, gp_Pnt, Standard_Real, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfEllipse", 
          "parent": "GC_MakeArcOfEllipse", 
          "arguments": [
            {
              "decl": "const gp_Elips &", 
              "type": "gp_Elips", 
              "name": "Elips"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P1"
            }, 
            {
              "decl": "const gp_Pnt &", 
              "type": "gp_Pnt", 
              "name": "P2"
            }, 
            {
              "decl": "const Standard_Boolean", 
              "type": "Standard_Boolean", 
              "name": "Sense"
            }
          ], 
          "key": "GC_MakeArcOfEllipse::GC_MakeArcOfEllipse(gp_Elips, gp_Pnt, gp_Pnt, Standard_Boolean)", 
          "returnType": "", 
          "throws": true
        }, 
        {
          "declType": "constructor", 
          "name": "GC_MakeArcOfEllipse", 
          "parent": "GC_MakeArcOfEllipse", 
          "arguments": [
            {
              "decl": "const GC_MakeArcOfEllipse &", 
              "type": "GC_MakeArcOfEllipse", 
              "name": "arg0"
            }
          ], 
          "key": "GC_MakeArcOfEllipse::GC_MakeArcOfEllipse(GC_MakeArcOfEllipse)", 
          "returnType": "", 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "declType": "method", 
          "name": "Value", 
          "parent": "GC_MakeArcOfEllipse", 
          "arguments": [], 
          "key": "GC_MakeArcOfEllipse::Value()", 
          "returnType": "opencascade::handle<Geom_TrimmedCurve> const &", 
          "const": "1", 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "GC_Root"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/GC_MakeArcOfEllipse.hxx", 
        39
      ], 
      "key": "GC_MakeArcOfEllipse"
    }
  ], 
  "name": "GC"
}