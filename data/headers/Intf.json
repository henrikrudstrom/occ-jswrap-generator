{
  "headers": [
    "Intf_SeqOfTangentZone.hxx", 
    "Intf_TangentZone.hxx", 
    "Intf_InterferencePolygon2d.hxx", 
    "Intf_Tool.hxx", 
    "Intf_PIType.hxx", 
    "Intf_SectionPoint.hxx", 
    "Intf_SeqOfSectionPoint.hxx", 
    "Intf_SeqOfSectionLine.hxx", 
    "Intf_Polygon2d.hxx", 
    "Intf_SectionLine.hxx", 
    "Intf_Interference.hxx", 
    "Intf_Array1OfLin.hxx"
  ], 
  "declarations": [
    {
      "declType": "class", 
      "name": "Intf_SectionPoint", 
      "abstract": false, 
      "declarations": [
        {
          "key": "Intf_SectionPoint::Intf_SectionPoint()", 
          "declType": "constructor", 
          "arguments": [], 
          "parent": "Intf_SectionPoint", 
          "name": "Intf_SectionPoint", 
          "return": {
            "type": "Intf_SectionPoint", 
            "ptr": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::Intf_SectionPoint(gp_Pnt, Intf_PIType, Standard_Integer, Standard_Integer, Standard_Real, Intf_PIType, Standard_Integer, Standard_Integer, Standard_Real, Standard_Real)", 
          "declType": "constructor", 
          "arguments": [
            {
              "type": "gp_Pnt", 
              "name": "Where", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Intf_PIType", 
              "name": "DimeO", 
              "const": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "AddrO1", 
              "const": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "AddrO2", 
              "const": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "ParamO", 
              "const": true
            }, 
            {
              "type": "Intf_PIType", 
              "name": "DimeT", 
              "const": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "AddrT1", 
              "const": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "AddrT2", 
              "const": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "ParamT", 
              "const": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "Incid", 
              "const": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "Intf_SectionPoint", 
          "return": {
            "type": "Intf_SectionPoint", 
            "ptr": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::Intf_SectionPoint(gp_Pnt2d, Intf_PIType, Standard_Integer, Standard_Real, Intf_PIType, Standard_Integer, Standard_Real, Standard_Real)", 
          "declType": "constructor", 
          "arguments": [
            {
              "type": "gp_Pnt2d", 
              "name": "Where", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Intf_PIType", 
              "name": "DimeO", 
              "const": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "AddrO1", 
              "const": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "ParamO", 
              "const": true
            }, 
            {
              "type": "Intf_PIType", 
              "name": "DimeT", 
              "const": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "AddrT1", 
              "const": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "ParamT", 
              "const": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "Incid", 
              "const": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "Intf_SectionPoint", 
          "return": {
            "type": "Intf_SectionPoint", 
            "ptr": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::Intf_SectionPoint(Intf_SectionPoint)", 
          "declType": "constructor", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "arg0", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "Intf_SectionPoint", 
          "return": {
            "type": "Intf_SectionPoint", 
            "ptr": true
          }, 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "key": "Intf_SectionPoint::Pnt()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_SectionPoint", 
          "name": "Pnt", 
          "return": {
            "type": "gp_Pnt", 
            "const": true, 
            "ref": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::ParamOnFirst()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_SectionPoint", 
          "name": "ParamOnFirst", 
          "return": {
            "type": "Standard_Real"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::ParamOnSecond()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_SectionPoint", 
          "name": "ParamOnSecond", 
          "return": {
            "type": "Standard_Real"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::TypeOnFirst()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_SectionPoint", 
          "name": "TypeOnFirst", 
          "return": {
            "type": "Intf_PIType"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::TypeOnSecond()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_SectionPoint", 
          "name": "TypeOnSecond", 
          "return": {
            "type": "Intf_PIType"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::InfoFirst(Intf_PIType, Standard_Integer, Standard_Integer, Standard_Real)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_PIType", 
              "name": "Dim", 
              "ref": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "Add1", 
              "ref": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "Add2", 
              "ref": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "Param", 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "InfoFirst", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::InfoFirst(Intf_PIType, Standard_Integer, Standard_Real)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_PIType", 
              "name": "Dim", 
              "ref": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "Addr", 
              "ref": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "Param", 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "InfoFirst", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::InfoSecond(Intf_PIType, Standard_Integer, Standard_Integer, Standard_Real)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_PIType", 
              "name": "Dim", 
              "ref": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "Add1", 
              "ref": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "Add2", 
              "ref": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "Param", 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "InfoSecond", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::InfoSecond(Intf_PIType, Standard_Integer, Standard_Real)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_PIType", 
              "name": "Dim", 
              "ref": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "Addr", 
              "ref": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "Param", 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "InfoSecond", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::Incidence()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_SectionPoint", 
          "name": "Incidence", 
          "return": {
            "type": "Standard_Real"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::IsEqual(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "Other", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "IsEqual", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::IsOnSameEdge(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "Other", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "IsOnSameEdge", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::Merge(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "Other", 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "Merge", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionPoint::Dump(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Indent", 
              "const": true
            }
          ], 
          "parent": "Intf_SectionPoint", 
          "name": "Dump", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/Intf_SectionPoint.hxx", 
        35
      ], 
      "key": "Intf_SectionPoint"
    }, 
    {
      "declType": "class", 
      "name": "Intf_TangentZone", 
      "abstract": false, 
      "declarations": [
        {
          "key": "Intf_TangentZone::Intf_TangentZone()", 
          "declType": "constructor", 
          "arguments": [], 
          "parent": "Intf_TangentZone", 
          "name": "Intf_TangentZone", 
          "return": {
            "type": "Intf_TangentZone", 
            "ptr": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::Intf_TangentZone(Intf_TangentZone)", 
          "declType": "constructor", 
          "arguments": [
            {
              "type": "Intf_TangentZone", 
              "name": "Other", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "Intf_TangentZone", 
          "return": {
            "type": "Intf_TangentZone", 
            "ptr": true
          }, 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "key": "Intf_TangentZone::NumberOfPoints()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_TangentZone", 
          "name": "NumberOfPoints", 
          "return": {
            "type": "Standard_Integer"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::GetPoint(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Index", 
              "const": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "GetPoint", 
          "return": {
            "type": "Intf_SectionPoint", 
            "const": true, 
            "ref": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::IsEqual(Intf_TangentZone)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_TangentZone", 
              "name": "Other", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "IsEqual", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::Contains(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "ThePI", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "Contains", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::ParamOnFirst(Standard_Real, Standard_Real)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Real", 
              "name": "paraMin", 
              "ref": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "paraMax", 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "ParamOnFirst", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::ParamOnSecond(Standard_Real, Standard_Real)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Real", 
              "name": "paraMin", 
              "ref": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "paraMax", 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "ParamOnSecond", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::InfoFirst(Standard_Integer, Standard_Real, Standard_Integer, Standard_Real)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "segMin", 
              "ref": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "paraMin", 
              "ref": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "segMax", 
              "ref": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "paraMax", 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "InfoFirst", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::InfoSecond(Standard_Integer, Standard_Real, Standard_Integer, Standard_Real)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "segMin", 
              "ref": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "paraMin", 
              "ref": true
            }, 
            {
              "type": "Standard_Integer", 
              "name": "segMax", 
              "ref": true
            }, 
            {
              "type": "Standard_Real", 
              "name": "paraMax", 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "InfoSecond", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::RangeContains(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "ThePI", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "RangeContains", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::HasCommonRange(Intf_TangentZone)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_TangentZone", 
              "name": "Other", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "HasCommonRange", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::Append(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "Pi", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "Append", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::Append(Intf_TangentZone)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_TangentZone", 
              "name": "Tzi", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "Append", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::Insert(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "Pi", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "Insert", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::PolygonInsert(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "Pi", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "PolygonInsert", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::InsertBefore(Standard_Integer, Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Index", 
              "const": true
            }, 
            {
              "type": "Intf_SectionPoint", 
              "name": "Pi", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "InsertBefore", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::InsertAfter(Standard_Integer, Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Index", 
              "const": true
            }, 
            {
              "type": "Intf_SectionPoint", 
              "name": "Pi", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "InsertAfter", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_TangentZone::Dump(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Indent", 
              "const": true
            }
          ], 
          "parent": "Intf_TangentZone", 
          "name": "Dump", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/Intf_TangentZone.hxx", 
        34
      ], 
      "key": "Intf_TangentZone"
    }, 
    {
      "declType": "class", 
      "name": "Intf_SectionLine", 
      "abstract": false, 
      "declarations": [
        {
          "key": "Intf_SectionLine::Intf_SectionLine()", 
          "declType": "constructor", 
          "arguments": [], 
          "parent": "Intf_SectionLine", 
          "name": "Intf_SectionLine", 
          "return": {
            "type": "Intf_SectionLine", 
            "ptr": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::Intf_SectionLine(Intf_SectionLine)", 
          "declType": "constructor", 
          "arguments": [
            {
              "type": "Intf_SectionLine", 
              "name": "Other", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionLine", 
          "name": "Intf_SectionLine", 
          "return": {
            "type": "Intf_SectionLine", 
            "ptr": true
          }, 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "key": "Intf_SectionLine::NumberOfPoints()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_SectionLine", 
          "name": "NumberOfPoints", 
          "return": {
            "type": "Standard_Integer"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::GetPoint(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Index", 
              "const": true
            }
          ], 
          "parent": "Intf_SectionLine", 
          "name": "GetPoint", 
          "return": {
            "type": "Intf_SectionPoint", 
            "const": true, 
            "ref": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::IsClosed()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_SectionLine", 
          "name": "IsClosed", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::Contains(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "ThePI", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionLine", 
          "name": "Contains", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::IsEnd(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "ThePI", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionLine", 
          "name": "IsEnd", 
          "return": {
            "type": "Standard_Integer"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::IsEqual(Intf_SectionLine)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionLine", 
              "name": "Other", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionLine", 
          "name": "IsEqual", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::Append(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "Pi", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionLine", 
          "name": "Append", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::Append(Intf_SectionLine)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionLine", 
              "name": "LS", 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionLine", 
          "name": "Append", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::Prepend(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "Pi", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionLine", 
          "name": "Prepend", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::Prepend(Intf_SectionLine)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionLine", 
              "name": "LS", 
              "ref": true
            }
          ], 
          "parent": "Intf_SectionLine", 
          "name": "Prepend", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::Reverse()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_SectionLine", 
          "name": "Reverse", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::Close()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_SectionLine", 
          "name": "Close", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_SectionLine::Dump(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Indent", 
              "const": true
            }
          ], 
          "parent": "Intf_SectionLine", 
          "name": "Dump", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/Intf_SectionLine.hxx", 
        33
      ], 
      "key": "Intf_SectionLine"
    }, 
    {
      "declType": "class", 
      "name": "Intf_Interference", 
      "abstract": false, 
      "declarations": [
        {
          "key": "Intf_Interference::Intf_Interference(Intf_Interference)", 
          "declType": "constructor", 
          "arguments": [
            {
              "type": "Intf_Interference", 
              "name": "arg0", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_Interference", 
          "name": "Intf_Interference", 
          "return": {
            "type": "Intf_Interference", 
            "ptr": true
          }, 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "key": "Intf_Interference::NbSectionPoints()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_Interference", 
          "name": "NbSectionPoints", 
          "return": {
            "type": "Standard_Integer"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Interference::PntValue(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Index", 
              "const": true
            }
          ], 
          "parent": "Intf_Interference", 
          "name": "PntValue", 
          "return": {
            "type": "Intf_SectionPoint", 
            "const": true, 
            "ref": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Interference::NbSectionLines()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_Interference", 
          "name": "NbSectionLines", 
          "return": {
            "type": "Standard_Integer"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Interference::LineValue(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Index", 
              "const": true
            }
          ], 
          "parent": "Intf_Interference", 
          "name": "LineValue", 
          "return": {
            "type": "Intf_SectionLine", 
            "const": true, 
            "ref": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Interference::NbTangentZones()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_Interference", 
          "name": "NbTangentZones", 
          "return": {
            "type": "Standard_Integer"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Interference::ZoneValue(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Index", 
              "const": true
            }
          ], 
          "parent": "Intf_Interference", 
          "name": "ZoneValue", 
          "return": {
            "type": "Intf_TangentZone", 
            "const": true, 
            "ref": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Interference::GetTolerance()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_Interference", 
          "name": "GetTolerance", 
          "return": {
            "type": "Standard_Real"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Interference::Contains(Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "ThePnt", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_Interference", 
          "name": "Contains", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Interference::Insert(Intf_TangentZone)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_TangentZone", 
              "name": "TheZone", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_Interference", 
          "name": "Insert", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Interference::Insert(Intf_SectionPoint, Intf_SectionPoint)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_SectionPoint", 
              "name": "pdeb", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Intf_SectionPoint", 
              "name": "pfin", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_Interference", 
          "name": "Insert", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Interference::Dump()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_Interference", 
          "name": "Dump", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/Intf_Interference.hxx", 
        40
      ], 
      "key": "Intf_Interference"
    }, 
    {
      "declType": "class", 
      "name": "Intf_Polygon2d", 
      "abstract": true, 
      "declarations": [
        {
          "key": "Intf_Polygon2d::Bounding()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_Polygon2d", 
          "name": "Bounding", 
          "return": {
            "type": "Bnd_Box2d", 
            "const": true, 
            "ref": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Polygon2d::Closed()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_Polygon2d", 
          "name": "Closed", 
          "return": {
            "type": "Standard_Boolean"
          }, 
          "throws": true, 
          "virtuality": "virtual"
        }, 
        {
          "key": "Intf_Polygon2d::DeflectionOverEstimation()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_Polygon2d", 
          "name": "DeflectionOverEstimation", 
          "return": {
            "type": "Standard_Real"
          }, 
          "throws": true, 
          "virtuality": "pure virtual"
        }, 
        {
          "key": "Intf_Polygon2d::NbSegments()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_Polygon2d", 
          "name": "NbSegments", 
          "return": {
            "type": "Standard_Integer"
          }, 
          "throws": true, 
          "virtuality": "pure virtual"
        }, 
        {
          "key": "Intf_Polygon2d::Segment(Standard_Integer, gp_Pnt2d, gp_Pnt2d)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "theIndex", 
              "const": true
            }, 
            {
              "type": "gp_Pnt2d", 
              "name": "theBegin", 
              "ref": true
            }, 
            {
              "type": "gp_Pnt2d", 
              "name": "theEnd", 
              "ref": true
            }
          ], 
          "parent": "Intf_Polygon2d", 
          "name": "Segment", 
          "return": {
            "type": "void"
          }, 
          "throws": true, 
          "virtuality": "pure virtual"
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/Intf_Polygon2d.hxx", 
        34
      ], 
      "key": "Intf_Polygon2d"
    }, 
    {
      "declType": "class", 
      "name": "Intf_InterferencePolygon2d", 
      "abstract": false, 
      "declarations": [
        {
          "key": "Intf_InterferencePolygon2d::Intf_InterferencePolygon2d()", 
          "declType": "constructor", 
          "arguments": [], 
          "parent": "Intf_InterferencePolygon2d", 
          "name": "Intf_InterferencePolygon2d", 
          "return": {
            "type": "Intf_InterferencePolygon2d", 
            "ptr": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_InterferencePolygon2d::Intf_InterferencePolygon2d(Intf_Polygon2d, Intf_Polygon2d)", 
          "declType": "constructor", 
          "arguments": [
            {
              "type": "Intf_Polygon2d", 
              "name": "Obje1", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Intf_Polygon2d", 
              "name": "Obje2", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_InterferencePolygon2d", 
          "name": "Intf_InterferencePolygon2d", 
          "return": {
            "type": "Intf_InterferencePolygon2d", 
            "ptr": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_InterferencePolygon2d::Intf_InterferencePolygon2d(Intf_Polygon2d)", 
          "declType": "constructor", 
          "arguments": [
            {
              "type": "Intf_Polygon2d", 
              "name": "Obje", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_InterferencePolygon2d", 
          "name": "Intf_InterferencePolygon2d", 
          "return": {
            "type": "Intf_InterferencePolygon2d", 
            "ptr": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_InterferencePolygon2d::Intf_InterferencePolygon2d(Intf_InterferencePolygon2d)", 
          "declType": "constructor", 
          "arguments": [
            {
              "type": "Intf_InterferencePolygon2d", 
              "name": "arg0", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_InterferencePolygon2d", 
          "name": "Intf_InterferencePolygon2d", 
          "return": {
            "type": "Intf_InterferencePolygon2d", 
            "ptr": true
          }, 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "key": "Intf_InterferencePolygon2d::Perform(Intf_Polygon2d, Intf_Polygon2d)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_Polygon2d", 
              "name": "Obje1", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Intf_Polygon2d", 
              "name": "Obje2", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_InterferencePolygon2d", 
          "name": "Perform", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_InterferencePolygon2d::Perform(Intf_Polygon2d)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Intf_Polygon2d", 
              "name": "Obje", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_InterferencePolygon2d", 
          "name": "Perform", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_InterferencePolygon2d::Pnt2dValue(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "Index", 
              "const": true
            }
          ], 
          "parent": "Intf_InterferencePolygon2d", 
          "name": "Pnt2dValue", 
          "return": {
            "type": "gp_Pnt2d"
          }, 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [
        {
          "access": "public", 
          "name": "Intf_Interference"
        }
      ], 
      "location": [
        "/usr/local/include/opencascade/Intf_InterferencePolygon2d.hxx", 
        35
      ], 
      "key": "Intf_InterferencePolygon2d"
    }, 
    {
      "declType": "class", 
      "name": "Intf_Tool", 
      "abstract": false, 
      "declarations": [
        {
          "key": "Intf_Tool::Intf_Tool()", 
          "declType": "constructor", 
          "arguments": [], 
          "parent": "Intf_Tool", 
          "name": "Intf_Tool", 
          "return": {
            "type": "Intf_Tool", 
            "ptr": true
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Tool::Intf_Tool(Intf_Tool)", 
          "declType": "constructor", 
          "arguments": [
            {
              "type": "Intf_Tool", 
              "name": "arg0", 
              "const": true, 
              "ref": true
            }
          ], 
          "parent": "Intf_Tool", 
          "name": "Intf_Tool", 
          "return": {
            "type": "Intf_Tool", 
            "ptr": true
          }, 
          "artificial": "1", 
          "throws": true, 
          "copyConstructor": true
        }, 
        {
          "key": "Intf_Tool::Lin2dBox(gp_Lin2d, Bnd_Box2d, Bnd_Box2d)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "gp_Lin2d", 
              "name": "theLin2d", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box2d", 
              "name": "bounding", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box2d", 
              "name": "boxLin", 
              "ref": true
            }
          ], 
          "parent": "Intf_Tool", 
          "name": "Lin2dBox", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Tool::Hypr2dBox(gp_Hypr2d, Bnd_Box2d, Bnd_Box2d)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "gp_Hypr2d", 
              "name": "theHypr2d", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box2d", 
              "name": "bounding", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box2d", 
              "name": "boxHypr", 
              "ref": true
            }
          ], 
          "parent": "Intf_Tool", 
          "name": "Hypr2dBox", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Tool::Parab2dBox(gp_Parab2d, Bnd_Box2d, Bnd_Box2d)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "gp_Parab2d", 
              "name": "theParab2d", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box2d", 
              "name": "bounding", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box2d", 
              "name": "boxHypr", 
              "ref": true
            }
          ], 
          "parent": "Intf_Tool", 
          "name": "Parab2dBox", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Tool::LinBox(gp_Lin, Bnd_Box, Bnd_Box)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "gp_Lin", 
              "name": "theLin", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box", 
              "name": "bounding", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box", 
              "name": "boxLin", 
              "ref": true
            }
          ], 
          "parent": "Intf_Tool", 
          "name": "LinBox", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Tool::HyprBox(gp_Hypr, Bnd_Box, Bnd_Box)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "gp_Hypr", 
              "name": "theHypr", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box", 
              "name": "bounding", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box", 
              "name": "boxHypr", 
              "ref": true
            }
          ], 
          "parent": "Intf_Tool", 
          "name": "HyprBox", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Tool::ParabBox(gp_Parab, Bnd_Box, Bnd_Box)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "gp_Parab", 
              "name": "theParab", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box", 
              "name": "bounding", 
              "const": true, 
              "ref": true
            }, 
            {
              "type": "Bnd_Box", 
              "name": "boxHypr", 
              "ref": true
            }
          ], 
          "parent": "Intf_Tool", 
          "name": "ParabBox", 
          "return": {
            "type": "void"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Tool::NbSegments()", 
          "declType": "method", 
          "arguments": [], 
          "parent": "Intf_Tool", 
          "name": "NbSegments", 
          "return": {
            "type": "Standard_Integer"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Tool::BeginParam(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "SegmentNum", 
              "const": true
            }
          ], 
          "parent": "Intf_Tool", 
          "name": "BeginParam", 
          "return": {
            "type": "Standard_Real"
          }, 
          "throws": true
        }, 
        {
          "key": "Intf_Tool::EndParam(Standard_Integer)", 
          "declType": "method", 
          "arguments": [
            {
              "type": "Standard_Integer", 
              "name": "SegmentNum", 
              "const": true
            }
          ], 
          "parent": "Intf_Tool", 
          "name": "EndParam", 
          "return": {
            "type": "Standard_Real"
          }, 
          "throws": true
        }
      ], 
      "artificial": false, 
      "bases": [], 
      "location": [
        "/usr/local/include/opencascade/Intf_Tool.hxx", 
        39
      ], 
      "key": "Intf_Tool"
    }, 
    {
      "type": "NCollection_Sequence<Intf_SectionPoint>", 
      "declType": "typedef", 
      "name": "Intf_SeqOfSectionPoint", 
      "key": "Intf_SeqOfSectionPoint"
    }, 
    {
      "type": "NCollection_Sequence<Intf_TangentZone>", 
      "declType": "typedef", 
      "name": "Intf_SeqOfTangentZone", 
      "key": "Intf_SeqOfTangentZone"
    }, 
    {
      "type": "NCollection_Sequence<Intf_SectionLine>", 
      "declType": "typedef", 
      "name": "Intf_SeqOfSectionLine", 
      "key": "Intf_SeqOfSectionLine"
    }, 
    {
      "type": "NCollection_Array1<gp_Lin>", 
      "declType": "typedef", 
      "name": "Intf_Array1OfLin", 
      "key": "Intf_Array1OfLin"
    }, 
    {
      "declType": "enum", 
      "values": [
        [
          "Intf_EXTERNAL", 
          0
        ], 
        [
          "Intf_FACE", 
          1
        ], 
        [
          "Intf_EDGE", 
          2
        ], 
        [
          "Intf_VERTEX", 
          3
        ]
      ], 
      "name": "Intf_PIType", 
      "key": "Intf_PIType"
    }
  ], 
  "name": "Intf"
}